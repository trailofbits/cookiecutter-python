[project]
name = "{{ cookiecutter.project_slug }}"
dynamic = ["version"]
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
{%- if cookiecutter.license == "Apache 2.0" %}
license = {text = "Apache-2.0"}
{%- elif cookiecutter.license == "AGPL v3" %}
license = {text = "AGPL-3.0-or-later"}
{%- elif cookiecutter.license == "Proprietary" %}
license = {file = "LICENSE"}
{%- endif %}

authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
classifiers = [
    "Programming Language :: Python :: 3",
]
dependencies = []
requires-python = ">=3.11"

[tool.setuptools.dynamic]
version = { attr = "{{ cookiecutter.__project_import }}.__version__" }

[project.optional-dependencies]
doc = [
    {%- if cookiecutter.documentation == "pdoc" -%}
    "pdoc"
    {%- endif -%}
]
test = ["pytest", "pytest-cov", "pretend", "coverage[toml]"]
lint = [
    # NOTE: ruff is under active development, so we pin conservatively here
    # and let Dependabot periodically perform this update.
    "ruff ~= 0.6.2",
    "pyright >= 1.1",
    "types-html5lib",
    "types-requests",
    "types-toml",
    {%- if cookiecutter.docstring_coverage %}
    "interrogate",
    {%- endif %}
]
dev = ["{{ cookiecutter.project_slug }}[doc,test,lint]", "twine", "build", "pre-commit"]

{% if cookiecutter.entry_point -%}
[project.scripts]
"{{ cookiecutter.entry_point }}" = "{{ cookiecutter.__project_import }}._cli:main"
{%- endif %}

[project.urls]
Homepage = "https://pypi.org/project/{{ cookiecutter.project_slug }}"
Documentation = "https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.project_slug }}/"
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/issues"
Source = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"

[tool.coverage.run]
# don't attempt code coverage for the CLI entrypoints
omit = ["{{ cookiecutter.__project_src_path }}/_cli.py"]

[tool.pyright]
# Type checking configuration
include = ["src", "test"]
pythonVersion = "3.11"
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
reportMissingTypeStubs = false

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.format]
line-ending = "lf"
quote-style = "double"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D203",  # Incompatible with D211
    "D213",  # Incompatible with D212
    "COM812",  # Can conflict with formatter
    "ISC001",  # Can conflict with formatter
]

[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity
max-complexity = 8

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings
convention = "google"

[tool.ruff.lint.pylint]
# Maximum number of branches for function or method
max-branches = 12
# Maximum number of return statements in function or method
max-returns = 6
# Maximum number of positional arguments for function or method
max-positional-args = 5

[tool.ruff.lint.per-file-ignores]
{% if cookiecutter.entry_point -%}
"{{ cookiecutter.__project_src_path }}/_cli.py" = [
    "T201", # allow print in cli module
]
{%- endif %}
"test/**/*.py" = [
    "D",    # no docstrings in tests
    "S101", # asserts are expected in tests
    "PLR2004",  # Allow magic values in tests
]
"**/conftest.py" = ["D"]  # No docstrings in pytest config

{%- if cookiecutter.docstring_coverage %}
[tool.interrogate]
# don't enforce documentation coverage for packaging, testing, the virtual
# environment, or the CLI (which is documented separately).
exclude = ["env", "test", "{{ cookiecutter.__project_src_path }}/_cli.py"]
ignore-semiprivate = true
fail-under = 100
{%- endif %}

[tool.pytest.ini_options]
# Support tests living beside code
testpaths = ["src", "test"]
python_files = ["test_*.py", "*_test.py"]
# Show test durations
addopts = "--durations=10"
