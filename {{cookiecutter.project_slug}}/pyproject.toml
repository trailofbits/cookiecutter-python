[build-system]
requires = ["flit_core >=3.5,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "{{ cookiecutter.project_slug }}"
dynamic = ["version"]
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    {%- if cookiecutter.license == "Apache 2.0" %}
    "License :: OSI Approved :: Apache Software License",
    {%- elif cookiecutter.license == "AGPL v3" %}
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    {%- elif cookiecutter.license == "Proprietary" %}
    "License :: Other/Proprietary License",
    {%- endif %}
]
dependencies = []
requires-python = ">=3.8"

[project.optional-dependencies]
doc = [
    {%- if cookiecutter.documentation == "pdoc" -%}
    "pdoc"
    {%- endif -%}
]
test = ["pytest", "pytest-cov", "pretend", "coverage[toml]"]
lint = [
    "black ~= 23.0",
    # NOTE: ruff is under active development, so we pin conservatively here
    # and let Dependabot periodically perform this update.
    "ruff < 0.0.293",
    "mypy >= 1.0",
    "types-html5lib",
    "types-requests",
    "types-toml",
    {%- if cookiecutter.docstring_coverage %}
    "interrogate",
    {%- endif %}
]
dev = ["{{ cookiecutter.project_slug }}[doc,test,lint]", "twine", "wheel", "build"]

{% if cookiecutter.entry_point -%}
[project.scripts]
"{{ cookiecutter.entry_point }}" = "{{ cookiecutter.__project_import }}._cli:main"
{%- endif %}

[project.urls]
Homepage = "https://pypi.org/project/{{ cookiecutter.project_slug }}"
Documentation = "https://{{ cookiecutter.github_username }}.github.io/{{ cookiecutter.project_slug }}/"
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/issues"
Source = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}"

[tool.flit.module]
name = "{{ cookiecutter.__project_import }}"

[tool.black]
line-length = 100

[tool.coverage.run]
# don't attempt code coverage for the CLI entrypoints
omit = ["{{ cookiecutter.__project_src_path }}/_cli.py"]

[tool.mypy]
packages = "{{ cookiecutter.__project_import }}"
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true
sqlite_cache = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.ruff]
line-length = 100
select = ["ALL"]
target-version = "py38"

[tool.ruff.per-file-ignores]
"{{ cookiecutter.__project_src_path }}/_cli.py" = [
    "T201", # allow `print` in cli module
]
"test/**/*.py" = [
    "D",    # no docstrings in tests
    "S101", # asserts are expected in tests
]

[tool.interrogate]
# don't enforce documentation coverage for packaging, testing, the virtual
# environment, or the CLI (which is documented separately).
exclude = ["env", "test", "{{ cookiecutter.__project_src_path }}/_cli.py"]
ignore-semiprivate = true
fail-under = 100
